// MIDI Training App - Security-Focused Database Schema
// Designed with security best practices, OWASP compliance, and GDPR considerations

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USERS & AUTHENTICATION
// ============================================================================

model User {
  id                String    @id @default(cuid())
  
  // Core Authentication Fields
  email             String    @unique @db.VarChar(255)
  emailVerified     DateTime? @map("email_verified")
  password          String?   @db.VarChar(255) // Nullable for OAuth-only users
  
  // Profile Information  
  name              String?   @db.VarChar(100)
  image             String?   @db.VarChar(500)
  
  // Authorization & Access Control
  role              UserRole  @default(FREE)
  
  // Security & Account Protection
  loginAttempts     Int       @default(0) @map("login_attempts")
  lockedUntil       DateTime? @map("locked_until")
  lastLoginAt       DateTime? @map("last_login_at")
  lastLoginIp       String?   @map("last_login_ip") @db.Inet
  passwordChangedAt DateTime? @map("password_changed_at")
  
  // Two-Factor Authentication
  twoFactorEnabled  Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret   String?   @map("two_factor_secret") @db.VarChar(255)
  backupCodes       String[]  @map("backup_codes")
  
  // Privacy & GDPR Compliance
  termsAcceptedAt   DateTime? @map("terms_accepted_at")
  privacyAcceptedAt DateTime? @map("privacy_accepted_at")
  marketingOptIn    Boolean   @default(false) @map("marketing_opt_in")
  dataProcessingConsent Boolean @default(false) @map("data_processing_consent")
  
  // Account Lifecycle
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at") // Soft delete for GDPR
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  auditLogs         AuditLog[]
  practiceProgress  PracticeProgress[]
  subscription      Subscription?
  paymentMethods    PaymentMethod[]
  invoices          Invoice[]
  usageRecords      UsageRecord[]
  
  // Database optimizations
  @@index([email])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([deletedAt])
  @@index([lockedUntil])
  @@map("users")
}

// OAuth Account Management (Google, Facebook, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @map("provider_account_id") @db.VarChar(255)
  
  // OAuth Tokens (encrypted at rest)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  
  // Security tracking
  createdAt         DateTime @default(now()) @map("created_at")
  lastUsedAt        DateTime @default(now()) @map("last_used_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

// Session Management for Authentication
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  userId       String   @map("user_id")
  expires      DateTime
  
  // Security tracking
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent") @db.VarChar(500)
  deviceInfo   Json?    @map("device_info") // Browser, OS, device type
  
  // Session metadata
  createdAt    DateTime @default(now()) @map("created_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expires])
  @@index([sessionToken])
  @@index([lastActivity])
  @@map("sessions")
}

// Email verification and password reset tokens
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   @db.VarChar(255) // email or user ID
  token      String   @unique @db.VarChar(255)
  type       TokenType @default(EMAIL_VERIFICATION)
  expires    DateTime
  attempts   Int      @default(0) // Prevent brute force
  
  // Security tracking
  createdAt  DateTime @default(now()) @map("created_at")
  usedAt     DateTime? @map("used_at")
  ipAddress  String?  @map("ip_address") @db.Inet
  
  @@unique([identifier, token])
  @@index([expires])
  @@index([type])
  @@map("verification_tokens")
}

// ============================================================================
// SECURITY & AUDIT LOGGING
// ============================================================================

model AuditLog {
  id        String   @id @default(cuid())
  
  // Who performed the action
  userId    String?  @map("user_id")
  
  // What happened
  action    AuditAction
  entity    String?  @db.VarChar(100) // "User", "Session", "Subscription"
  entityId  String?  @map("entity_id")
  
  // Context and metadata
  metadata  Json?    // Additional context (old/new values, etc.)
  
  // Security context
  ipAddress String?  @map("ip_address") @db.Inet
  userAgent String?  @map("user_agent") @db.VarChar(500)
  
  // Compliance
  severity  LogSeverity @default(INFO)
  category  String   @db.VarChar(50) // "auth", "data", "security"
  
  // Timing
  createdAt DateTime @default(now()) @map("created_at")
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([severity])
  @@index([ipAddress])
  @@map("audit_logs")
}

// ============================================================================
// APPLICATION DATA
// ============================================================================

// User practice progress and statistics
model PracticeProgress {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  
  // Progress tracking
  moduleType      String   @map("module_type") @db.VarChar(50) // "chord-recognition", "counterpoint"
  levelId         String   @map("level_id") @db.VarChar(100)
  
  // Performance metrics
  score           Int      // 0-100
  timeSpent       Int      @map("time_spent") // seconds
  attempts        Int      @default(1)
  
  // Detailed stats
  correctAnswers  Int      @map("correct_answers")
  totalQuestions  Int      @map("total_questions")
  averageTime     Float    @map("average_time") // seconds per question
  
  // Metadata
  difficulty      String   @db.VarChar(20) // "beginner", "intermediate", "advanced"
  completedAt     DateTime @map("completed_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleType, levelId, completedAt])
  @@index([userId])
  @@index([moduleType])
  @@index([completedAt])
  @@map("practice_progress")
}

// Subscription and billing (for future paywall)
model Subscription {
  id               String           @id @default(cuid())
  userId           String           @unique @map("user_id")
  
  // Subscription details
  plan             SubscriptionPlan
  status           SubscriptionStatus
  
  // Billing
  stripeCustomerId String?          @unique @map("stripe_customer_id")
  stripeSubscriptionId String?      @unique @map("stripe_subscription_id")
  stripePriceId    String?          @map("stripe_price_id")
  
  // Billing cycle
  amount           Int?             // Amount in cents
  currency         String?          @db.VarChar(3) @default("usd")
  interval         BillingInterval? @default(MONTHLY)
  
  // Subscription lifecycle
  currentPeriodStart DateTime?      @map("current_period_start")
  currentPeriodEnd   DateTime?      @map("current_period_end")
  startDate        DateTime         @map("start_date")
  endDate          DateTime?        @map("end_date")
  trialEndsAt      DateTime?        @map("trial_ends_at")
  cancelledAt      DateTime?        @map("cancelled_at")
  cancelAtPeriodEnd Boolean         @default(false) @map("cancel_at_period_end")
  
  // Metadata
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  
  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

// Payment Methods stored in Stripe
model PaymentMethod {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  
  // Stripe details
  stripePaymentMethodId String @unique @map("stripe_payment_method_id")
  
  // Card details (for display only)
  type             PaymentMethodType @default(CARD)
  cardBrand        String?  @map("card_brand") @db.VarChar(20)
  cardLast4        String?  @map("card_last4") @db.VarChar(4)
  cardExpMonth     Int?     @map("card_exp_month")
  cardExpYear      Int?     @map("card_exp_year")
  
  // Status
  isDefault        Boolean  @default(false) @map("is_default")
  isActive         Boolean  @default(true) @map("is_active")
  
  // Metadata
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isDefault])
  @@map("payment_methods")
}

// Invoice and billing history
model Invoice {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  subscriptionId   String?       @map("subscription_id")
  
  // Stripe details
  stripeInvoiceId  String        @unique @map("stripe_invoice_id")
  
  // Invoice details
  number           String?       @db.VarChar(50)
  description      String?       @db.Text
  amount           Int           // Amount in cents
  amountPaid       Int           @map("amount_paid") // Amount actually paid
  currency         String        @db.VarChar(3) @default("usd")
  
  // Status and dates
  status           InvoiceStatus
  invoiceDate      DateTime      @map("invoice_date")
  dueDate          DateTime?     @map("due_date")
  paidAt           DateTime?     @map("paid_at")
  
  // PDF and receipt
  invoicePdf       String?       @map("invoice_pdf") @db.Text
  receiptUrl       String?       @map("receipt_url") @db.Text
  
  // Billing period
  periodStart      DateTime?     @map("period_start")
  periodEnd        DateTime?     @map("period_end")
  
  // Metadata
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
  @@index([invoiceDate])
  @@map("invoices")
}

// Usage tracking for billing and limits
model UsageRecord {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  
  // Usage details
  feature          UsageFeature
  amount           Int      // Number of uses/sessions/etc
  periodStart      DateTime @map("period_start")
  periodEnd        DateTime @map("period_end")
  
  // Metadata
  recordedAt       DateTime @default(now()) @map("recorded_at")
  metadata         Json?    // Additional context
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, feature, periodStart])
  @@index([userId])
  @@index([feature])
  @@index([periodStart])
  @@map("usage_records")
}

// Webhook event tracking for idempotency and security
model WebhookEvent {
  id              String   @id @default(cuid())
  
  // Event details
  stripeEventId   String   @unique @map("stripe_event_id") @db.VarChar(255)
  eventType       String   @map("event_type") @db.VarChar(100)
  
  // Processing details
  processedAt     DateTime @map("processed_at")
  processingTime  Int?     @map("processing_time") // milliseconds
  success         Boolean  @default(true)
  errorMessage    String?  @map("error_message") @db.Text
  
  // Metadata for analysis
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@index([stripeEventId])
  @@index([eventType])
  @@index([processedAt])
  @@map("webhook_events")
}


// ============================================================================
// ENUMS & TYPES
// ============================================================================

enum UserRole {
  FREE
  PREMIUM
  PRO
  TEACHER
  ADMIN
  
  @@map("user_role")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_RECOVERY
  
  @@map("token_type")
}

enum AuditAction {
  // Authentication
  USER_REGISTERED
  USER_LOGIN
  USER_LOGOUT
  USER_LOGIN_FAILED
  PASSWORD_CHANGED
  EMAIL_VERIFIED
  ACCOUNT_LOCKED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  
  // Data operations
  USER_UPDATED
  USER_DELETED
  PROGRESS_RECORDED
  
  // Security events
  SUSPICIOUS_ACTIVITY
  SECURITY_ALERT
  
  // Subscription
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
  
  @@map("audit_action")
}

enum LogSeverity {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
  
  @@map("log_severity")
}

enum SubscriptionPlan {
  FREE
  PREMIUM
  PRO
  TEACHER
  
  @@map("subscription_plan")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  INCOMPLETE
  TRIAL
  
  @@map("subscription_status")
}

enum BillingInterval {
  MONTHLY
  YEARLY
  
  @@map("billing_interval")
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  
  @@map("payment_method_type")
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
  
  @@map("invoice_status")
}

enum UsageFeature {
  PRACTICE_SESSIONS
  LEVEL_ACCESS
  EXPORT_DATA
  ADVANCED_ANALYTICS
  
  @@map("usage_feature")
}
